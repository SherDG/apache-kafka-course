LINUX MINT(kafka 4.0.0 - no zookeper needed, Kraft usaed instead)
INSTALL
--------------------------------------
mkdir -p ~/kafka
cd ~/kafka
wget https://downloads.apache.org/kafka/4.0.0/kafka_2.13-4.0.0.tgz
cd ~/kafka/kafka_2.13-4.0.0
mkdir -p ~/kafka/kafka_2.13-4.0.0/config/kraft
sudo nano ~/kafka/kafka_2.13-4.0.0/config/kraft/server.properties
# KRaft specific configurations
process.roles=broker,controller
node.id=1
controller.quorum.voters=1@localhost:9093

# Listener configurations
listeners=PLAINTEXT://:9092,CONTROLLER://:9093
advertised.listeners=PLAINTEXT://localhost:9092
listener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
inter.broker.listener.name=PLAINTEXT
controller.listener.names=CONTROLLER

# Log configurations
log.dirs=/tmp/kraft-combined-logs

# Other configurations
num.partitions=1
default.replication.factor=1
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

bin/kafka-storage.sh random-uuid > cluster-id.txt
bin/kafka-storage.sh format -t $(cat cluster-id.txt) -c config/kraft/server.properties

START
--------------------------------------
cd ~/kafka/kafka_2.13-4.0.0
bin/kafka-storage.sh random-uuid > cluster-id.txt
bin/kafka-storage.sh format -t $(cat cluster-id.txt) -c config/kraft/server.properties
bin/kafka-server-start.sh config/kraft/server.properties


Basic KAFKA Commands

START ZOOKEEPER
bin/zookeeper-server-start.sh config/zookeeper.properties

START KAFKA BROKER
bin/kafka-server-start.sh config/server.properties

CREATE TOPIC
bin/kafka-topics.sh \
--bootstrap-server localhost:9092 \
--create \
--replication-factor 1 \
--partitions 3 \
--topic test

bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --replication-factor 1 --partitions 3 --topic test


LIST TOPICS
bin/kafka-topics.sh \
--bootstrap-server localhost:9092 \
--list

TOPIC DETAILS
bin/kafka-topics.sh \
--bootstrap-server localhost:9092 \
--describe \
--topic test

START CONSOLE PRODUCER
in Kafka 4.0.0:
# Step 1: Create the topic with desired configuration
bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --replication-factor 1 --partitions 3 --topic test

# Step 2: Produce messages to the topic
bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test

START CONSOLE CONSUMER
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning
bin/kafka-console-consumer.sh \
--bootstrap-server localhost:9092 \
--topic test

SERVER LOGS
cd /home/dima/kafka/kafka_2.13-4.0.0/logs
cat controller.log.2025-05-23-10

LOGS
cd /tmp/kraft-combined-logs



START CONSOLE PERFORMANCE PRODUCER
in Kafka 4.0.0:
# Step 1: Create the topic with desired configuration
bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --replication-factor 1 --partitions 3 --topic test

# Step 2: Produce messages to the topic
bin/kafka-producer-perf-test.sh --topic test --num-records 1000 throughput 100 --record-size 1000 --producer-props --bootstrap-server localhost:9092

PRODUCER PERFORMANCE TEST
bin/kafka-producer-perf-test.sh \
--topic perf2 \
--num-records 1000 \
--throughput 10 \
--record-size 1000 \
--producer-props \
bootstrap.servers=localhost:9092


CONSUMER PERFORMANCE TEST
bin/kafka-consumer-perf-test.sh \
--broker-list localhost:9092 \
--topic perf \
--messages 1000000


START CONSOLE CONSUMER AND READ MESSAGES FROM BEGINNING
bin/kafka-console-consumer.sh \
--bootstrap-server localhost:9092 \
--topic test \
--from-beginning

START CONSOLE CONSUMER WITH SPECIFIC CONSUMER GROUP
bin/kafka-console-consumer.sh \
--bootstrap-server localhost:9092 \
--topic test \
--group test \
--from-beginning

LIST CONSUMER GROUPS
bin/kafka-consumer-groups.sh \
--bootstrap-server localhost:9092 \
--list

CONSUMER GROUP DETAILS
bin/kafka-consumer-groups.sh \
--bootstrap-server localhost:9092 \
--group test \
--describe

